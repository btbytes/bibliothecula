This page uses  some modern CSS/HTML5 techniques  to achieve stuff
without any javascript.

Here's a  rough list so  that you  can look at  whatever interests
you:

- The  layout: Uses  CSS Grid  and some  CSS flex  boxes. See  the
  `body`, `div.screenshots`,  `div.screenshots>figure` elements in
  the stylesheet.

  The body  width is split to  12 columns, and each  body child is
  set to skip  the first and last column to  appear centered using
  the `body>*` selector. To override this for specific elements we
  use CSS  specificity: more  specific rules over...rule  the less
  specific ones. So setting the footer element to

  `grid-column: span 12;`

  means it won't appear centered but span the whole width.

- The emoji list markers:  achieved with the `list-style-type` CSS
  property which accepts strings as input.

- the  screenshot gallery  is a  CSS Grid  that only  sets up  the
  `grid-auto-rows`  and  `grid-template-columns` properties.  That
  way we can add any number of  grid items and they are setup in a
  grid on  their own.  We specify a  minimum screenshot  size with
  `minmax()`  CSS function.  The  `auto`  grid properties  specify
  auto-placement of children.

- the screenshots <figure>  elements are also a CSS  grid of their
  own,  in order  to control  the size  of the  image. We  want to
  ensure  it  won't  overflow  its  container,  so  we  setup  max
  dimensions and  set `object-*`  CSS properties to  control their
  offsets and scaling.

- The click to zoom screenshot gallery without any javascript uses
  the  `:target` CSS  selector. You  set the  element's `id`  HTML
  property, you add an `<a>` element with `href="#id"` where id is
  the one you used, and when  you click it the element becomes the
  user's target, selectable via the `:target` CSS selector.

  Instead of  making the visible  screenshot a target, we  make an
  invisible  one (an  element with  `display: none;`).  Then, when
  it's the target we make it visible. To return to the page, add a
  link to "#" or any other element id, maybe a heading's.

  How is the zoomed screenshot  the only thing visible? By putting
  the  invisible elements  before  any visible  ones,  we use  the
  adjacent sibling CSS selector (`~`) to select *all* the siblings
  that  follow the  targeted  screenshot. We  can  then make  them
  invisible by setting `display: none;`. Simple as that!

- The header:

  * the title has different font  settings than the main font. The
    loaded font is  "variable", it can be  customised through some
    parameters  using  the `font-variation-settings`  property  of
    each element.

  * the title has textured background. This is achieved by setting
    the  texture as  a `background`  with a  `radial-gradient` and
    then, setting the `background-clip`  to `text`: this makes the
    background visible only through text.

    o lack  of support  for this  is detected  by `@supports`  CSS
      queries, which in this case  uses a plain text color instead
      of clipping the background.

    o because the background layer of an element is below the text
      shadow  layer, it's  impossible  to set  a `text-shadow`  on
      the  textured title  without it  being over  the background.
      Thankfully we can  create a "shadow" copy of  the title, put
      it below the  actual title and put  the `text-shadow` there.
      The elements perfectly stack on top of its other because the
      `<summary>`  element is  has  the  CSS properties  `display:
      inline-grid;` and `grid-template-areas: "header-stack";`. If
      both  <h1>  elements use  the  same  grid area,  they  stack
      according to  the grid flow  order (in this case,  the order
      they appear on  the source code). The shadow  <h1> is hidden
      from screen  readers by using the  `aria-hidden="true"` HTML
      attribute.

  * the font-size  uses the `min()`  CSS function to set  the font
    size to a smaller value if  the viewport becomes too small: if
    the viewport's  5% of  width is less  than 3rem  (that's three
    times the  size of the  font-size of the root  <html> element)
    then the `min()` function selects the smaller width as the new
    font-size.

  * the <h1> element  is set to `display: grid`  and its `:before`
    and `:after` pseudoelements suddenly become grid items!

    What a weird thing. (This is a recent CSS feature.)

    They are then set up to look like dashes on the left and right
    of the title.

  * the title shows... something when you click it:

    o the <h1> element is inside a <details> element that requires
      the user to click to display further info
    o the   <h1>    grid   changes   its   layout    through   the
      `details.click[open] h1.click`  etcetera selectors  and then
      one  of the  pseudo-elements becomes  an image  box via  the
      `content` CSS property, and the other becomes a caption that
      takes its text from the heading's `title` HTML property (the
      one that  shows a tooltip  when you hover over  the element)
      using the `attr()` CSS function.

    o Note:  the image  doesn't  load until  the pseudoelement  is
      visible.  That's  because it doesn't exist in the DOM and is
      generated with CSS only.

    o The image  and caption appear above  everything else because
      they create a new stacking context via CSS; that is achieved
      via setting the `position` CSS  property to absolute in this
      case.

    o The pseudo elements are moved to the right of the heading by
      setting up the `grid-column` and `grid-row` CSS properties.

    o The heading compensates the lack  of the previous column gap
      by setting `margin-left` to the column gap width.

    o The  changes  are  delayed   through  the  `transition`  CSS
      property.

    o The  image, having  a  height larger  of  the <h1>  element,
      doesn't hang its excess height  on the bottom: it uses `top:
      calc(100% -  <image-height>)` where <image-height> is  a CSS
      variable set to the <h1> element.

    o The  image is  cropped with  the `background-position-{x,y}`
      CSS  properties.The  upper  corners are  also  smoothed  out
      by  setting `border-top-{right,left}-radius`  CSS properties
      without any actual border setup.

    o The image is scaled responsively to the viewport width using
      the `min()` function.

- the screenshot  images are  lazily loaded:  by setting  the HTML
  attribute `loading="lazy"`  they are  loaded when they  enter or
  are close  enough to  the user's viewport  without the  need for
  javascript. Despite that, lazy loading is turned off if you have
  javascript disabled  in order to avoid  tracking users' location
  within the page by purposefuly placed lazy loading elements.

- the browser  is instructed to  preload the font with  the `<link
  rel="preload" ..` HTML element to make sure it shows up faster.

- the custom `@font-face` has `font-display: swap` set in order to
  show a system  font until the custom one  has loaded, preventing
  flashes of invisible text.

- the `contain` CSS property is  used for some elements that might
  have complex layout but do  not otherwise affect the other ones.
  This  is a  very small  optimization that  basically allows  the
  browser to know how much the layout changes in each redraw.

- <img>  widths and  heights and  also  grid item  widths are  set
  explicitly in order to let the browser know their size a priori.

- The `outline` CSS property is  used to frame screenshots instead
  of `border`  because borders trigger layout  changes but outline
  do not,  since they are  not part of the  element. Additionally,
  screenshot elements are "trimmed"  to their size since `contain`
  is used with `paint` which means  the element is not supposed to
  paint outside  of its  own area. Hence,  the outline  is shifted
  inside the element by 2 pixels using `outline-offset: -2px;`.

- The  <wbr>  HTML element  is  used  to hint  possible  linebreak
  positions within  URLs. The elements  are not shown to  the user
  and have no effect other than nice breaking of long URLs instead
  of breaking anywhere:

  https://<wbr>example<wbr>.<wbr>com<wbr>/<wbr>epilys
